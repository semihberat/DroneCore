import json
import threading
import time
import logging
import serial
import functools
import sys
from queue import Queue, Full

from digi.xbee.devices import XBeeDevice
from digi.xbee.exception import XBeeException, TransmitException, TimeoutException, InvalidOperatingModeException

logging.basicConfig(level=logging.INFO, format='[%(asctime)s - %(levelname)s]:\n\t%(message)s')

def check_connected(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        if not self.device.is_open():
            logging.error("XBee cihazÄ± aÃ§Ä±k deÄŸil.")
            return None
        return func(self, *args, **kwargs)
    return wrapper

class XbeeService:
    def __init__(self, message_received_callback, port="/dev/ttyUSB0", baudrate=57600, max_queue_size=20):
        self.port = port
        self.baudrate = baudrate
        self.device = XBeeDevice(port, baudrate)
        self.address = self.device.get_16bit_addr()
        self.message_received_callback = message_received_callback
        self.recent_messages = Queue(maxsize=max_queue_size)
        self.queue_stop_event = threading.Event()
        # self.configure_xbee_api_mode()
        self.queue_thread = threading.Thread(target=self.queue_processor, daemon=True)
        if self.message_received_callback:
            self.queue_thread.start()
            logging.warning("Mesaj kuyruÄŸu iÅŸleme thread'i baÅŸlatÄ±ldÄ±.")
        else:
            logging.warning("Mesaj alÄ±ndÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lacak callback fonksiyonu belirtilmemiÅŸ.")

    
    def queue_processor(self):
        """
        Mesaj kuyruÄŸundan mesajlarÄ± iÅŸleyen thread fonksiyonu.
        """
        while not self.queue_stop_event.is_set():
            if self.recent_messages.empty():
                time.sleep(0.1)
                continue
            try:
                message = self.recent_messages.get(timeout=0.5)
                logging.info(f"Mesaj iÅŸleniyor: {message}")
                
                # Processed message dictionary iÃ§in Ã¶zel handler
                self.handle_processed_message(message)
                logging.info("Mesaj baÅŸarÄ±yla iÅŸlendi.")
                self.recent_messages.task_done()
            except Exception as e:
                logging.error(f"Mesaj iÅŸlenirken hata oluÅŸtu: {e}")
                if not self.recent_messages.empty():
                    self.recent_messages.task_done()
    
    def handle_processed_message(self, message_dict):
        """
        Ä°ÅŸlenmiÅŸ mesaj dictionary'sini iÅŸleyen fonksiyon.
        message_dict format: {"sender": "...", "isBroadcast": True, "data": "...", "timestamp": ...}
        """
        try:
            sender = message_dict.get("sender", "Unknown")
            is_broadcast = message_dict.get("isBroadcast", False)
            data = message_dict.get("data", "")
            timestamp = message_dict.get("timestamp", 0)
            
            logging.info(f"ğŸ“¨ XBee MesajÄ± AlÄ±ndÄ±:")
            logging.info(f"   GÃ¶nderen: {sender}")
            logging.info(f"   Broadcast: {is_broadcast}")
            logging.info(f"   Veri: {data}")
            logging.info(f"   Zaman: {timestamp}")
            
            # EÄŸer Ã¶zel bir callback varsa ve farklÄ±ysa onu da Ã§aÄŸÄ±r
            if (hasattr(self, 'custom_message_handler') and 
                callable(self.custom_message_handler)):
                self.custom_message_handler(message_dict)
                
        except Exception as e:
            logging.error(f"Ä°ÅŸlenmiÅŸ mesaj handle edilirken hata: {e}")
    
    def set_custom_message_handler(self, handler_func):
        """
        Ã–zel mesaj iÅŸleyici fonksiyonu ayarlar.
        Bu fonksiyon iÅŸlenmiÅŸ mesaj dictionary'si alÄ±r.
        """
        self.custom_message_handler = handler_func
        logging.info("Ã–zel mesaj iÅŸleyici ayarlandÄ±.")
    
    def default_message_received_callback(self, message):
        """
        Xbee'den gelen mesajlarÄ± iÅŸleyen callback fonksiyonu.
        """
        try:
            if not self.queue_thread.is_alive() and self.message_received_callback:
                self.queue_thread.start()
            message_data = message.data.decode('utf-8')
            sender = int.from_bytes(message.remote_device.get_64bit_addr().address, "big")
            message_full = {
                "sender": f"{sender:016X}",
                "isBroadcast": message.is_broadcast,
                "data": message_data,
                "timestamp": message.timestamp
            }
            logging.debug(f"Mesaj alÄ±ndÄ±: {message_full}")
            try:
                self.recent_messages.put_nowait(message_full)
                logging.info("Mesaj kuyruÄŸa eklendi")
            except Full:
                logging.error(f"Mesaj kuyruÄŸa eklenemedi, kuyruk dolu.")
                # Kuyruk doluysa en eski mesajÄ± sil ve yeni mesajÄ± ekle
                logging.info("En eski mesaj siliniyor ve yeni mesaj ekleniyor.")
                self.recent_messages.get_nowait()
                self.recent_messages.put_nowait(message_full)
        except Exception as e:
            logging.error(f"Mesaj iÅŸlenirken hata oluÅŸtu: {e}")
    
    def configure_xbee_api_mode(self):
        """
        XBee cihazÄ±nÄ± API moduna geÃ§irir.
        """
        try:
            logging.info("XBee cihazÄ± API moduna geÃ§iriliyor...")
            # Serial baÄŸlantÄ± kur
            ser = serial.Serial(self.port, self.baudrate, timeout=2)
            time.sleep(1)  # BaÄŸlantÄ±nÄ±n stabilleÅŸmesi iÃ§in bekle
            # Command moduna geÃ§
            ser.write(b'+++')
            time.sleep(2)
            response = ser.read(ser.in_waiting)
            logging.info(f"Command mode response: {response}")
            # API mode 1'e geÃ§ (AP=1)
            ser.write(b'ATAP1\r')
            time.sleep(0.5)
            response = ser.read(ser.in_waiting)
            logging.info(f"API mode response: {response}")
            # AyarlarÄ± kaydet
            ser.write(b'ATWR\r')
            time.sleep(0.5)
            response = ser.read(ser.in_waiting)
            logging.info(f"Write response: {response}")
            # Command modundan Ã§Ä±k
            ser.write(b'ATCN\r')
            time.sleep(0.5)
            ser.close()
            logging.info("XBee baÅŸarÄ±yla API moduna geÃ§irildi.")
            return True
            
        except Exception as e:
            logging.error(f"XBee API moduna geÃ§irilirken hata: {e}")
            return False

    def listen(self):
        """
        Xbee mesajlarÄ±nÄ± dinler ve mesaj gelince callback fonksiyonunu Ã§aÄŸÄ±rÄ±r.
        """
        try:
            if not self.device.is_open():
                self.device.open()
            self.device.add_data_received_callback(self.default_message_received_callback)
            logging.info("XBee dinleniyor...")
        except Exception as e:
            logging.error(f"XBee aÃ§Ä±lamadÄ±: {e}")
            raise
    
    def construct_message(self, data):
        """
        Verilen mesajÄ± JSON formatÄ±na Ã§evirir.
        """
        message = {
            "i": self.address,
            "d": data,
            "t": int(time.time()*1000)
        }
        logging.debug(f"Mesaj yapÄ±landÄ±rÄ±ldÄ±.")
        return json.dumps(message, ensure_ascii=False).replace("\n", "").replace(" ", "").encode('utf-8')
    
    @check_connected
    def send_broadcast_message(self, data, construct_message=False):
        """
        Xbee Ã¼zerinden veri yayÄ±nlar (broadcast eder).
        """
        try:
            if construct_message:
                message = self.construct_message(data)
            else:
                message = data
            logging.debug(f"Broadcast mesajÄ± yapÄ±landÄ±rÄ±ldÄ±: {message}")
            self.device.send_data_broadcast(message)
            logging.info(f"Mesaj gÃ¶nderildi:\n Mesaj: {data}\nAlÄ±cÄ±: Broadcast")
            return True
        except XBeeException as e:
            logging.error(f"XBee HatasÄ±: {e}")
            return False
        except TimeoutException as e:
            logging.error(f"Zaman aÅŸÄ±mÄ± hatasÄ±: {e}")
            return False
        except TransmitException as e:
            logging.error(f"Transmit hatasÄ±: {e}")
            return False
        except InvalidOperatingModeException as e:
            logging.error(f"GeÃ§ersiz Ã§alÄ±ÅŸma modu hatasÄ±: {e}")
            return False
    
    @check_connected
    def send_private_message(self, receiver, data):
        """
        Xbee Ã¼zerinden bir alÄ±cÄ±ya veri gÃ¶nderir.
        """
        message = self.construct_message(data)
        try:
            self.device.send_data(receiver, message)
            logging.info(f"Mesaj gÃ¶nderildi:\n Mesaj: {data}\nAlÄ±cÄ±: {receiver}")
            return True
        except Exception as e:
            logging.error(f"Mesaj gÃ¶nderilemedi: {e}")
            return False
    
    def close(self):
        """
        XBee cihazÄ±nÄ± kapatÄ±r ve mesaj kuyruÄŸu iÅŸleme thread'ini durdurur.
        """
        if self.device.is_open():
            self.device.close()
            logging.info("XBee kapatÄ±ldÄ±.")
            self.queue_stop_event.set()
            logging.info("Mesaj kuyruÄŸu iÅŸleme thread'i durduruldu.")
        else:
            logging.warning("XBee zaten kapalÄ±.")
            
def main():
    """
    XBeeController test fonksiyonu.
    Bu fonksiyon, XBee cihazÄ±nÄ± baÅŸlatÄ±r, mesaj gÃ¶nderir ve dinler.
    """
    xbee = XbeeService(message_received_callback=XbeeService.default_message_received_callback, port = "/dev/ttyUSB1", baudrate=57600, max_queue_size=100)
    xbee.listen()
    
    # Test mesajÄ± gÃ¶nder
    try:
        while True:
            # xbee.send_broadcast_message("oto mesaj", construct_message=True)
            time.sleep(1)
    except KeyboardInterrupt:
        xbee.close()

if __name__ == "__main__":
    logging.info("XBeeController baÅŸlatÄ±lÄ±yor...")
    main()
    logging.info("XBeeController testinin tÃ¼m adÄ±mlarÄ± tamamlandÄ±, Ã§Ä±kÄ±lÄ±yor.")
    sys.exit(0)